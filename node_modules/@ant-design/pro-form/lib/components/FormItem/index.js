"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _List = require("../List");

var _FieldContext = _interopRequireDefault(require("../../FieldContext"));

var _proUtils = require("@ant-design/pro-utils");

var _LightWrapper = _interopRequireDefault(require("../../BaseForm/LightWrapper"));

var _excluded = ["children", "value", "onChange", "onBlur", "valuePropName"],
    _excluded2 = ["valueType", "transform", "dataFormat", "ignoreFormItem", "lightProps"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * 把value扔给 fieldProps，方便给自定义用
 *
 * @param param0
 * @returns
 */
var WithValueFomFiledProps = function WithValueFomFiledProps(filedProps) {
  var _filedChildren$props;

  var filedChildren = filedProps.children,
      value = filedProps.value,
      _onChange = filedProps.onChange,
      onBlur = filedProps.onBlur,
      _filedProps$valueProp = filedProps.valuePropName,
      valuePropName = _filedProps$valueProp === void 0 ? 'value' : _filedProps$valueProp,
      restProps = _objectWithoutProperties(filedProps, _excluded);

  if (! /*#__PURE__*/_react.default.isValidElement(filedChildren)) return filedChildren;
  var fieldProps = // @ts-ignore
  (filedChildren === null || filedChildren === void 0 ? void 0 : filedChildren.type.displayName) === 'ProFormComponent' ? (0, _proUtils.omitUndefined)(_objectSpread(_objectSpread(_defineProperty({
    id: restProps.id
  }, valuePropName, filedProps[valuePropName]), filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props = filedChildren.props) === null || _filedChildren$props === void 0 ? void 0 : _filedChildren$props.fieldProps), {}, {
    // 这个 onChange 是 Form.Item 添加上的，
    // 要通过 fieldProps 透传给 ProField 调用
    onChange: function onChange() {
      var _filedChildren$props2, _filedChildren$props3, _filedChildren$props4;

      for (var _len = arguments.length, restParams = new Array(_len), _key = 0; _key < _len; _key++) {
        restParams[_key] = arguments[_key];
      }

      _onChange === null || _onChange === void 0 ? void 0 : _onChange.apply(void 0, restParams);
      filedChildren === null || filedChildren === void 0 ? void 0 : (_filedChildren$props2 = filedChildren.props) === null || _filedChildren$props2 === void 0 ? void 0 : (_filedChildren$props3 = _filedChildren$props2.fieldProps) === null || _filedChildren$props3 === void 0 ? void 0 : (_filedChildren$props4 = _filedChildren$props3.onChange) === null || _filedChildren$props4 === void 0 ? void 0 : _filedChildren$props4.call.apply(_filedChildren$props4, [_filedChildren$props3].concat(restParams));
    },
    onBlur: onBlur
  })) : undefined;
  return /*#__PURE__*/_react.default.cloneElement(filedChildren, (0, _proUtils.omitUndefined)(_objectSpread(_objectSpread(_objectSpread({}, restProps), {}, {
    value: value,
    onChange: _onChange,
    onBlur: onBlur
  }, filedChildren.props), {}, {
    fieldProps: fieldProps
  })));
};

var ProFormItem = function ProFormItem(props) {
  var _rest$name, _rest$name2;

  var size = (0, _react.useContext)(_antd.ConfigProvider.SizeContext);

  var valueType = props.valueType,
      transform = props.transform,
      dataFormat = props.dataFormat,
      ignoreFormItem = props.ignoreFormItem,
      _props$lightProps = props.lightProps,
      lightProps = _props$lightProps === void 0 ? {} : _props$lightProps,
      rest = _objectWithoutProperties(props, _excluded2);

  var formListField = (0, _react.useContext)(_List.FormListContext); // ProFromList 的 filed，里面有name和key

  /** 从 context 中拿到的值 */

  var name = (0, _react.useMemo)(function () {
    if (formListField.name !== undefined) {
      return [formListField.name, props.name].flat(1);
    }

    return props.name;
  }, [formListField.name, props.name]);
  /** 从 context 中拿到的值 */

  var _React$useContext = _react.default.useContext(_FieldContext.default),
      setFieldValueType = _React$useContext.setFieldValueType;

  (0, _react.useEffect)(function () {
    // 如果 setFieldValueType 和 props.name 不存在不存入
    if (!setFieldValueType || !props.name) {
      return;
    } // Field.type === 'ProField' 时 props 里面是有 valueType 的，所以要设置一下
    // 写一个 ts 比较麻烦，用 any 顶一下


    setFieldValueType([formListField.listName, name].flat(1).filter(function (itemName) {
      return itemName !== undefined;
    }), {
      valueType: valueType || 'text',
      dateFormat: dataFormat,
      transform: transform
    });
  }, [formListField.listName, name, dataFormat, props.name, setFieldValueType, transform, valueType]);
  var isDropdown = /*#__PURE__*/_react.default.isValidElement(props.children) && (0, _proUtils.isDropdownValueType)(valueType || props.children.props.valueType);
  var noLightFormItem = (0, _react.useMemo)(function () {
    if (!lightProps.light || lightProps.customLightMode || isDropdown) {
      return true;
    }

    return false;
  }, [lightProps.customLightMode, isDropdown, lightProps.light]);

  if (typeof props.children === 'function') {
    return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({}, rest, {
      name: name
    }), props.children);
  } // formItem 支持function，如果是function 我就直接不管了


  var children = /*#__PURE__*/_react.default.createElement(WithValueFomFiledProps, {
    key: (_rest$name = rest.name) === null || _rest$name === void 0 ? void 0 : _rest$name.toString(),
    valuePropName: props.valuePropName
  }, props.children);

  var lightDom = noLightFormItem ? children : /*#__PURE__*/_react.default.createElement(_LightWrapper.default, _extends({}, lightProps, {
    key: (_rest$name2 = rest.name) === null || _rest$name2 === void 0 ? void 0 : _rest$name2.toString(),
    size: size
  }), children); // 这里控制是否需要 LightWrapper，为了提升一点点性能

  if (ignoreFormItem) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, lightDom);
  }

  return /*#__PURE__*/_react.default.createElement(_antd.Form.Item, _extends({}, rest, {
    name: name
  }), lightDom);
};

var _default = ProFormItem;
exports.default = _default;